class Solution {
public:
    vector<int> par, size;

    int findParent(int u) {
        if (par[u] == u) return u;
        return par[u] = findParent(par[u]); // Path compression
    }

    void Union(int u, int v) {
        int up = findParent(u);
        int vp = findParent(v);

        if (up == vp) return;

        // Always attach the tree with larger size
        if (size[up] > size[vp]) {
            size[up] += size[vp];
            par[vp] = up;
        } else {
            size[vp] += size[up];
            par[up] = vp;
        }
    }

    string smallestEquivalentString(string s1, string s2, string baseStr) {
        par.resize(26);
        size.resize(26, 1); // Initialize size to 1

        for (int i = 0; i < 26; i++) par[i] = i;

        for (int i = 0; i < s1.size(); i++) {
            int c1 = s1[i] - 'a';
            int c2 = s2[i] - 'a';
            Union(c1, c2);
        }

        // Map each representative to a min-heap of its characters
        map<int, priority_queue<int, vector<int>, greater<int>>> mp;
        for (int i = 0; i < 26; i++) {
            int p = findParent(i);
            mp[p].push(i);
        }

        string ans;
        for (char c : baseStr) {
            int x = findParent(c - 'a');
            ans.push_back(mp[x].top() + 'a');
        }

        return ans;
    }
};
