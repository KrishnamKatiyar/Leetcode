class Solution {
public:
    bool areSentencesSimilar(string sentence1, string sentence2) {
        // Ensure that sentence1 is the smaller sentence
        if (sentence1.length() > sentence2.length()) {
            return areSentencesSimilar(sentence2, sentence1);
        }
        
        // Split the sentences into words
        vector<string> smallerWords = split(sentence1);
        vector<string> largerWords = split(sentence2);
        
        int start = 0;
        int end1 = smallerWords.size() - 1;
        int end2 = largerWords.size() - 1;
        
        // Find prefix words
        while (start <= end1 && smallerWords[start] == largerWords[start]) {
            start++;
        }
        
        // Find suffix words
        while (start <= end1 && smallerWords[end1] == largerWords[end2]) {
            end1--;
            end2--;
        }
        
        return start > end1;
    }
    
private:
    // Utility function to split a string by spaces
    vector<string> split(const string& s) {
        vector<string> result;
        istringstream ss(s);
        string word;
        while (ss >> word) {
            result.push_back(word);
        }
        return result;
    }
};
