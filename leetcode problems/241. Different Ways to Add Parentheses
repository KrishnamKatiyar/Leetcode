class Solution {
public:
    vector<int> diffWaysToCompute(string expression) {
        int n = expression.size();
        vector<vector<vector<int>>> dp(n, vector<vector<int>>(n));
        return recur(expression, 0, n - 1, dp);
    }
    
    // Helper function
    vector<int> recur(string& exp, int start, int end, vector<vector<vector<int>>>& dp) {
        vector<int> res;
        if (!dp[start][end].empty()) {
            return dp[start][end];
        }
        
        // Base case: single digit
        if (start == end) {
            int num = exp[start] - '0';
            res.push_back(num);
            return res;
        }

        // Base case: double digit
        if (end - start == 1 && isdigit(exp[start])) {
            int num1 = exp[start] - '0';
            int num2 = exp[end] - '0';
            res.push_back(num1 * 10 + num2);
            return res;
        }

        // Split the expression
        for (int i = start; i <= end; ++i) {
            if (isdigit(exp[i])) {
                continue;
            }
            char op = exp[i];
            
            vector<int> left = recur(exp, start, i - 1, dp);
            vector<int> right = recur(exp, i + 1, end, dp);
            
            for (int l : left) {
                for (int r : right) {
                    if (op == '*') {
                        res.push_back(l * r);
                    } else if (op == '+') {
                        res.push_back(l + r);
                    } else { // op == '-'
                        res.push_back(l - r);
                    }
                }
            }
        }
        
        dp[start][end] = res;
        return res;
    }
};
