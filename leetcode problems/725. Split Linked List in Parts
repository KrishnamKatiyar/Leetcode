#include <iostream>
#include <vector>

using namespace std;

// Definition for singly-linked list.
struct ListNode {
    int val;
    ListNode* next;
    ListNode(int x) : val(x), next(nullptr) {}
};

class Solution {
public:
    vector<ListNode*> splitListToParts(ListNode* head, int k) {
        // Find the size of the list
        ListNode* temp = head;
        int size = 0;
        while (temp != nullptr) {
            size++;
            temp = temp->next;
        }

        vector<ListNode*> res(k, nullptr); // Array to store the result
        temp = head;
        int avg = size / k;
        int extra = size % k;

        for (int i = 0; i < k; i++) {
            if (temp == nullptr) break; // If the list is fully split
            ListNode* curHead = temp;
            ListNode* prev = nullptr;
            int len = 0;

            // Create a part of size avg
            while (temp != nullptr && len < avg) {
                prev = temp;
                temp = temp->next;
                len++;
            }

            // If there are extra nodes, add one more node to this part
            if (extra > 0) {
                prev = temp;
                temp = temp->next;
                extra--;
            }

            // Detach the current part from the rest of the list
            if (prev != nullptr) prev->next = nullptr;
            res[i] = curHead;
        }

        return res;
    }
};

// Helper function to print a linked list
void printList(ListNode* head) {
    while (head != nullptr) {
        cout << head->val << " ";
        head = head->next;
    }
    cout << endl;
}

// Helper function to create a linked list from an array
ListNode* createList(const vector<int>& arr) {
    if (arr.empty()) return nullptr;
    ListNode* head = new ListNode(arr[0]);
    ListNode* current = head;
    for (size_t i = 1; i < arr.size(); ++i) {
        current->next = new ListNode(arr[i]);
        current = current->next;
    }
    return head;
}

int main() {
    Solution solution;

    // Creating a sample linked list
    vector<int> arr = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    ListNode* head = createList(arr);

    int k = 3;
    vector<ListNode*> result = solution.splitListToParts(head, k);

    // Print the split parts
    for (int i = 0; i < k; ++i) {
        cout << "Part " << i + 1 << ": ";
        printList(result[i]);
    }

    return 0;
}
