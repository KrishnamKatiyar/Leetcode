#include <vector>
#include <algorithm>
using namespace std;

class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        vector<int> sub;

        for (int num : nums) {
            auto it = lower_bound(sub.begin(), sub.end(), num); // Binary search for the position
            if (it == sub.end()) {
                sub.push_back(num); // Append if num is greater than all elements
            } else {
                *it = num; // Replace the first element >= num
            }
        }

        return sub.size();
    }
};




// #include <vector>
// #include <algorithm>
// using namespace std;

// class Solution {
// public:
//     int lengthOfLIS(vector<int>& nums) {
//         int n = nums.size();
//         if (n == 0) return 0;

//         vector<int> dp(n, 1); // Initialize dp with 1.
//         int maxLength = 1;

//         for (int i = 1; i < n; i++) {
//             for (int j = 0; j < i; j++) {
//                 if (nums[j] < nums[i]) {
//                     dp[i] = max(dp[i], dp[j] + 1);
//                 }
//             }
//             maxLength = max(maxLength, dp[i]); // Update the overall max length.
//         }

//         return maxLength;
//     }
// };
