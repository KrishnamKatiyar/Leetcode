class Solution {
public:
    int robotSim(vector<int>& commands, vector<vector<int>>& obstacles) {
        // Directions: 0 = North, 1 = East, 2 = South, 3 = West
        vector<vector<int>> directions = { {0, 1}, {1, 0}, {0, -1}, {-1, 0} };
        vector<int> curPos = {0, 0};
        int res = 0;
        int curDir = 0;

        unordered_map<int, unordered_set<int>> obstacleMap;

        // Store obstacles in a map for quick lookup
        for (const auto& obstacle : obstacles) {
            obstacleMap[obstacle[0]].insert(obstacle[1]);
        }

        // Process each command
        for (int command : commands) {
            if (command == -1) {
                // Turn right
                curDir = (curDir + 1) % 4;
            } else if (command == -2) {
                // Turn left
                curDir = (curDir + 3) % 4; // (curDir - 1 + 4) % 4 is equivalent
            } else {
                // Move forward
                vector<int> direction = directions[curDir];
                for (int step = 0; step < command; ++step) {
                    int nextX = curPos[0] + direction[0];
                    int nextY = curPos[1] + direction[1];
                    if (obstacleMap.count(nextX) && obstacleMap[nextX].count(nextY)) {
                        break; // Hit an obstacle, stop moving in this direction
                    }
                    curPos[0] = nextX;
                    curPos[1] = nextY;
                    res = max(res, curPos[0] * curPos[0] + curPos[1] * curPos[1]);
                }
            }
        }

        return res;
    }
};
