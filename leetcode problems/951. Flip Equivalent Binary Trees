/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    bool dfs(TreeNode* node1, TreeNode* node2) {
        // If both nodes are null, they are equivalent
        if(!node1 && !node2) return true;
        // If only one is null, they are not equivalent
        else if(!node1 || !node2) return false;

        // Check if current nodes have the same value and 
        // (1) their children match directly or 
        // (2) their children match when flipped
        return (node1->val == node2->val) && ((dfs(node1->left, node2->left) && dfs(node1->right, node2->right)) || (dfs(node1->left, node2->right) && dfs(node1->right, node2->left)));
    }
public:
    bool flipEquiv(TreeNode* root1, TreeNode* root2) {
        return dfs(root1, root2);
    }
};
