class CustomStack {
    vector<int> stack;
    vector<int> operations;
    int capacity;
    int size;
    int index;
    
public:
    CustomStack(int maxSize) {
        stack.resize(maxSize);
        operations.resize(maxSize);
        capacity = maxSize;
        size = 0;
        index = -1;
    }
    
    void push(int x) {
        if (isFull()) {
            return;
        }
        index++;
        size++;
        stack[index] = x;
    }
    
    int pop() {
        if (isEmpty()) {
            return -1;
        }
        int val = stack[index];
        val += operations[index];
        if (index > 0) {
            operations[index - 1] += operations[index];
        }
        operations[index] = 0;
        index--;
        size--;
        return val;
    }
    
    void increment(int k, int val) {
        if (isEmpty()) {
            return;
        }
        int num = std::min(size, k);
        operations[num - 1] += val;
    }
    
private:
    bool isFull() {
        return (size == capacity);
    }

    bool isEmpty() {
        return (size == 0);
    }
};

/**
 * Your CustomStack object will be instantiated and called as such:
 * CustomStack* obj = new CustomStack(maxSize);
 * obj->push(x);
 * int param_2 = obj->pop();
 * obj->increment(k,val);
 */
