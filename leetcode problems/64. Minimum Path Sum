class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        
        // Create a 1D DP array
        vector<int> dp(n, 0);
        dp[0] = grid[0][0];
        
        // Fill the first row
        for (int j = 1; j < n; j++) {
            dp[j] = dp[j-1] + grid[0][j];
        }
        
        // Iterate over rows
        for (int i = 1; i < m; i++) {
            dp[0] += grid[i][0]; // Update the first column value
            for (int j = 1; j < n; j++) {
                dp[j] = grid[i][j] + min(dp[j], dp[j-1]);
            }
        }
        
        return dp[n-1];
    }
};





// #include <vector>
// #include <algorithm>
// using namespace std;

// class Solution {
// public:
//     int minPathSum(vector<vector<int>>& grid) {
//         int m = grid.size();
//         int n = grid[0].size();
        
//         // Create a DP array
//         vector<vector<int>> dp(m, vector<int>(n, 0));
//         dp[0][0] = grid[0][0];
        
//         // Fill the first row
//         for (int j = 1; j < n; j++) {
//             dp[0][j] = dp[0][j-1] + grid[0][j];
//         }
        
//         // Fill the first column
//         for (int i = 1; i < m; i++) {
//             dp[i][0] = dp[i-1][0] + grid[i][0];
//         }
        
//         // Fill the rest of the DP table
//         for (int i = 1; i < m; i++) {
//             for (int j = 1; j < n; j++) {
//                 dp[i][j] = grid[i][j] + min(dp[i-1][j], dp[i][j-1]);
//             }
//         }
        
//         return dp[m-1][n-1];
//     }
// };

