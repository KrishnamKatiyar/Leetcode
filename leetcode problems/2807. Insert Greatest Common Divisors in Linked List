#include <iostream>
using namespace std;

// Definition for singly-linked list.
struct ListNode {
    int val;
    ListNode *next;
    ListNode() : val(0), next(nullptr) {}
    ListNode(int x) : val(x), next(nullptr) {}
    ListNode(int x, ListNode *next) : val(x), next(next) {}
};

class Solution {
public:
    // Function to calculate GCD of two numbers
    int findGCD(int a, int b) {
        if (b == 0) return a;
        return findGCD(b, a % b);
    }

    // Function to insert GCD nodes between nodes in the linked list
    ListNode* insertGreatestCommonDivisors(ListNode* head) {
        if (head->next == nullptr) return head;

        ListNode* cur = head;
        while (cur->next != nullptr) {
            int maxVal = max(cur->val, cur->next->val);
            int minVal = min(cur->val, cur->next->val);
            int gcd = findGCD(maxVal, minVal);
            
            // Insert new GCD node
            ListNode* gcdNode = new ListNode(gcd);
            gcdNode->next = cur->next;
            cur->next = gcdNode;
            
            // Move to the next node
            cur = gcdNode->next;
        }
        return head;
    }
};

// Helper function to print the linked list
void printList(ListNode* head) {
    while (head != nullptr) {
        cout << head->val << " ";
        head = head->next;
    }
    cout << endl;
}

// Helper function to create a linked list from an array
ListNode* createList(const vector<int>& arr) {
    if (arr.empty()) return nullptr;
    ListNode* head = new ListNode(arr[0]);
    ListNode* current = head;
    for (size_t i = 1; i < arr.size(); ++i) {
        current->next = new ListNode(arr[i]);
        current = current->next;
    }
    return head;
}

int main() {
    Solution solution;

    // Creating a sample linked list
    vector<int> arr = {18, 24, 36}; // Linked list: 18 -> 24 -> 36
    ListNode* head = createList(arr);

    // Inserting GCD nodes
    head = solution.insertGreatestCommonDivisors(head);

    // Print the modified linked list
    printList(head);

    return 0;
}
