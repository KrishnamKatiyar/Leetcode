#include <iostream>
#include <vector>

using namespace std;

class Solution {
public:
    vector<int> missingRolls(vector<int>& rolls, int mean, int n) {
        int m = rolls.size();
        int sum = mean * (n + m);

        // Subtract the sum of the given rolls from the total sum
        for (int i = 0; i < m; i++) {
            sum -= rolls[i];
        }

        // If it's impossible to divide the remaining sum into `n` rolls
        if (sum < n || sum > 6 * n) {
            return {}; // Return an empty vector if no solution
        }

        // Distribute the remaining sum into `n` rolls
        int avg = sum / n;
        int rem = sum % n;
        vector<int> res(n);

        for (int i = 0; i < n; i++) {
            res[i] = avg;
            if (rem > 0) {
                res[i]++;
                rem--;
            }
        }

        return res;
    }
};

int main() {
    Solution sol;
    vector<int> rolls = {3, 2, 4, 3}; // Example input
    int mean = 4;
    int n = 2;

    vector<int> result = sol.missingRolls(rolls, mean, n);

    // Print result
    if (result.empty()) {
        cout << "No solution found." << endl;
    } else {
        cout << "Missing rolls: ";
        for (int val : result) {
            cout << val << " ";
        }
        cout << endl;
    }

    return 0;
}
